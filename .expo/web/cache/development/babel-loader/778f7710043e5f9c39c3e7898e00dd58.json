{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Asset } from 'expo-asset';\nvar isReactImageFormat = function isReactImageFormat(object) {\n  return object !== null && typeof object === 'object' && !(object instanceof Asset) && object.uri !== null && typeof object.uri === 'string';\n};\nexport function resolveAsync(_x) {\n  return _resolveAsync.apply(this, arguments);\n}\nfunction _resolveAsync() {\n  _resolveAsync = _asyncToGenerator(function* (fileReference) {\n    if (isReactImageFormat(fileReference)) {\n      return resolveAsync(fileReference.uri);\n    } else if (typeof fileReference === 'number') {\n      var asset = Asset.fromModule(fileReference);\n      return resolveAsync(asset);\n    } else if (typeof fileReference === 'string') {\n      var _asset = Asset.fromURI(fileReference);\n      return resolveAsync(_asset);\n    }\n    if (fileReference instanceof Asset) {\n      if (!fileReference.localUri) {\n        try {\n          yield fileReference.downloadAsync();\n        } catch (error) {\n          if (error.message.includes('unsupported URL')) {\n            fileReference.localUri = fileReference.uri;\n          } else {\n            throw error;\n          }\n        }\n      }\n      return fileReference;\n    }\n    throw new Error(\"Cannot resolve asset automatically: \" + fileReference);\n  });\n  return _resolveAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/resolveAsync.ts"],"names":[],"mappings":";AAAA,SAAS,KAAK,QAAQ,YAAY;AAElC,IAAM,kBAAkB,GAAG,SAArB,kBAAkB,CAAG,MAAM;EAAA,OAC/B,MAAM,KAAK,IAAI,IACf,OAAO,MAAM,KAAK,QAAQ,IAC1B,EAAE,MAAM,YAAY,KAAK,CAAC,IAC1B,MAAM,CAAC,GAAG,KAAK,IAAI,IACnB,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ;AAAA;AAEhC,gBAAsB,YAAY;EAAA;AAAA;AA6BjC;EAAA,kCA7BM,WAA4B,aAAkB,EAAA;IAEnD,IAAI,kBAAkB,CAAC,aAAa,CAAC,EAAE;MACrC,OAAO,YAAY,CAAC,aAAa,CAAC,GAAG,CAAC;KACvC,MAAM,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;MAC5C,IAAM,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,aAAa,CAAC;MAC7C,OAAO,YAAY,CAAC,KAAK,CAAC;KAC3B,MAAM,IAAI,OAAO,aAAa,KAAK,QAAQ,EAAE;MAC5C,IAAM,MAAK,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC;MAC1C,OAAO,YAAY,CAAC,MAAK,CAAC;IAC3B;IAGD,IAAI,aAAa,YAAY,KAAK,EAAE;MAClC,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;QAC3B,IAAI;UACF,MAAM,aAAa,CAAC,aAAa,EAAE;SACpC,CAAC,OAAO,KAAK,EAAE;UAEd,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE;YAC7C,aAAa,CAAC,QAAQ,GAAG,aAAa,CAAC,GAAG;WAC3C,MAAM;YACL,MAAM,KAAK;UACZ;QACF;MACF;MACD,OAAO,aAAa;IACrB;IACD,MAAM,IAAI,KAAK,0CAAwC,aAAa,CAAG;EACzE,CAAC;EAAA;AAAA","sourcesContent":["import { Asset } from 'expo-asset';\n\nconst isReactImageFormat = object =>\n  object !== null &&\n  typeof object === 'object' &&\n  !(object instanceof Asset) &&\n  object.uri !== null &&\n  typeof object.uri === 'string';\n\nexport async function resolveAsync(fileReference: any): Promise<Asset> {\n  // Reduce format\n  if (isReactImageFormat(fileReference)) {\n    return resolveAsync(fileReference.uri);\n  } else if (typeof fileReference === 'number') {\n    const asset = Asset.fromModule(fileReference);\n    return resolveAsync(asset);\n  } else if (typeof fileReference === 'string') {\n    const asset = Asset.fromURI(fileReference);\n    return resolveAsync(asset);\n  }\n\n  // Load asset URI\n  if (fileReference instanceof Asset) {\n    if (!fileReference.localUri) {\n      try {\n        await fileReference.downloadAsync();\n      } catch (error) {\n        // Handle weird Expo iOS error where remote URIs cannot be downloaded.\n        if (error.message.includes('unsupported URL')) {\n          fileReference.localUri = fileReference.uri;\n        } else {\n          throw error;\n        }\n      }\n    }\n    return fileReference;\n  }\n  throw new Error(`Cannot resolve asset automatically: ${fileReference}`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}