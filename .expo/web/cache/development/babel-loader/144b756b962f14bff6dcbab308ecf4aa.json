{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { resolveAsync } from 'expo-asset-utils';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport THREE from \"./Three\";\nvar ExpoTextureLoader = function (_THREE$TextureLoader) {\n  _inherits(ExpoTextureLoader, _THREE$TextureLoader);\n  var _super = _createSuper(ExpoTextureLoader);\n  function ExpoTextureLoader() {\n    _classCallCheck(this, ExpoTextureLoader);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ExpoTextureLoader, [{\n    key: \"load\",\n    value: function load(asset, onLoad, onProgress, onError) {\n      if (!asset) {\n        throw new Error('ExpoTHREE.TextureLoader.load(): Cannot parse a null asset');\n      }\n      var texture = new THREE.Texture();\n      var loader = new THREE.ImageLoader(this.manager);\n      loader.setCrossOrigin(this.crossOrigin);\n      loader.setPath(this.path);\n      _asyncToGenerator(function* () {\n        var nativeAsset = yield resolveAsync(asset);\n        function parseAsset(image) {\n          texture.image = image;\n          texture.needsUpdate = true;\n          if (onLoad !== undefined) {\n            onLoad(texture);\n          }\n        }\n        if (Platform.OS === 'web') {\n          loader.load(nativeAsset.localUri, function (image) {\n            parseAsset(image);\n          }, onProgress, onError);\n        } else {\n          if (!nativeAsset.width || !nativeAsset.height) {\n            var _yield$Promise = yield new Promise(function (res, rej) {\n                Image.getSize(nativeAsset.localUri, function (width, height) {\n                  return res({\n                    width: width,\n                    height: height\n                  });\n                }, rej);\n              }),\n              width = _yield$Promise.width,\n              height = _yield$Promise.height;\n            nativeAsset.width = width;\n            nativeAsset.height = height;\n          }\n          texture['isDataTexture'] = true;\n          parseAsset({\n            data: nativeAsset,\n            width: nativeAsset.width,\n            height: nativeAsset.height\n          });\n        }\n      })();\n      return texture;\n    }\n  }]);\n  return ExpoTextureLoader;\n}(THREE.TextureLoader);\nexport { ExpoTextureLoader as default };","map":{"version":3,"sources":["../src/TextureLoader.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,YAAY,QAAQ,kBAAkB;AAAC;AAAA;AAGhD,OAAO,KAAK;AAAgB,IAEP,iBAAkB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OACrC,cACE,KAAU,EACV,MAAyC,EACzC,UAA2C,EAC3C,OAAqC,EAAA;MAErC,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D;MACF;MAED,IAAM,OAAO,GAAG,IAAI,KAAK,CAAC,OAAO,EAAE;MAEnC,IAAM,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC;MAClD,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC;MACvC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;MAEzB,kBAAC,aAAW;QACV,IAAM,WAAW,SAAS,YAAY,CAAC,KAAK,CAAC;QAE7C,SAAS,UAAU,CAAC,KAAK,EAAA;UACvB,OAAO,CAAC,KAAK,GAAG,KAAK;UACrB,OAAO,CAAC,WAAW,GAAG,IAAI;UAE1B,IAAI,MAAM,KAAK,SAAS,EAAE;YACxB,MAAM,CAAC,OAAO,CAAC;UAChB;QACH;QAEA,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;UACzB,MAAM,CAAC,IAAI,CACT,WAAW,CAAC,QAAS,EACrB,UAAA,KAAK,EAAG;YACN,UAAU,CAAC,KAAK,CAAC;UACnB,CAAC,EACD,UAAU,EACV,OAAO,CACR;SACF,MAAM;UACL,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;YAC7C,2BAAgC,IAAI,OAAO,CAAoC,UAAC,GAAG,EAAE,GAAG,EAAI;gBAC1F,KAAK,CAAC,OAAO,CACX,WAAW,CAAC,QAAQ,EACpB,UAAC,KAAa,EAAE,MAAc;kBAAA,OAAK,GAAG,CAAC;oBAAE,KAAK,EAAL,KAAK;oBAAE,MAAM,EAAN;kBAAM,CAAE,CAAC;gBAAA,GACzD,GAAG,CACJ;cACH,CAAC,CAAC;cANM,KAAK,kBAAL,KAAK;cAAE,MAAM,kBAAN,MAAM;YAOrB,WAAW,CAAC,KAAK,GAAG,KAAK;YACzB,WAAW,CAAC,MAAM,GAAG,MAAM;UAC5B;UACD,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI;UAE/B,UAAU,CAAC;YACT,IAAI,EAAE,WAAW;YACjB,KAAK,EAAE,WAAW,CAAC,KAAK;YACxB,MAAM,EAAE,WAAW,CAAC;WACrB,CAAC;QACH;MACH,CAAC,GAAG;MAEJ,OAAO,OAAO;IAChB;EAAC;EAAA;AAAA,EA/D4C,KAAK,CAAC,aAAa;AAAA,SAA7C,iBAAkB","sourcesContent":["import { resolveAsync } from 'expo-asset-utils';\nimport { Platform, Image } from 'react-native';\n\nimport THREE from './Three';\n\nexport default class ExpoTextureLoader extends THREE.TextureLoader {\n  load(\n    asset: any,\n    onLoad?: (texture: THREE.Texture) => void,\n    onProgress?: (event: ProgressEvent) => void,\n    onError?: (event: ErrorEvent) => void\n  ): THREE.Texture {\n    if (!asset) {\n      throw new Error(\n        'ExpoTHREE.TextureLoader.load(): Cannot parse a null asset'\n      );\n    }\n\n    const texture = new THREE.Texture();\n\n    const loader = new THREE.ImageLoader(this.manager);\n    loader.setCrossOrigin(this.crossOrigin);\n    loader.setPath(this.path);\n\n    (async () => {\n      const nativeAsset = await resolveAsync(asset);\n\n      function parseAsset(image) {\n        texture.image = image;\n        texture.needsUpdate = true;\n\n        if (onLoad !== undefined) {\n          onLoad(texture);\n        }\n      }\n\n      if (Platform.OS === 'web') {\n        loader.load(\n          nativeAsset.localUri!,\n          image => {\n            parseAsset(image);\n          },\n          onProgress,\n          onError\n        );\n      } else {\n        if (!nativeAsset.width || !nativeAsset.height) {\n          const { width, height } = await new Promise<{ width: number, height: number }>((res, rej) => {\n            Image.getSize(\n              nativeAsset.localUri,\n              (width: number, height: number) => res({ width, height }),\n              rej\n            );\n          });\n          nativeAsset.width = width;\n          nativeAsset.height = height;\n        }\n        texture['isDataTexture'] = true; // Forces passing to `gl.texImage2D(...)` verbatim\n\n        parseAsset({\n          data: nativeAsset,\n          width: nativeAsset.width,\n          height: nativeAsset.height,\n        });\n      }\n    })();\n\n    return texture;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}