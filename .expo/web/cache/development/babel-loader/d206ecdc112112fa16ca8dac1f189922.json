{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { EncodingType, readAsStringAsync } from 'expo-file-system';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { resolveAsync } from \"./resolveAsync\";\nfunction getSizeAsync(uri) {\n  return new Promise(function (resolve, reject) {\n    return Image.getSize(uri, function (width, height) {\n      return resolve({\n        width: width,\n        height: height\n      });\n    }, reject);\n  });\n}\nexport function base64forImageUriAsync(_x) {\n  return _base64forImageUriAsync.apply(this, arguments);\n}\nfunction _base64forImageUriAsync() {\n  _base64forImageUriAsync = _asyncToGenerator(function* (file) {\n    var asset = yield resolveAsync(file);\n    var size = yield getSizeAsync(asset.localUri);\n    var data = yield readAsStringAsync(asset.localUri, {\n      encoding: EncodingType.Base64\n    });\n    return {\n      data: data,\n      size: size\n    };\n  });\n  return _base64forImageUriAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/base64forImageUriAsync.ts"],"names":[],"mappings":";AAAA,SAAS,YAAY,EAAE,iBAAiB,QAAQ,kBAAkB;AAAC;AAEnE,SAAS,YAAY;AAErB,SAAS,YAAY,CAAC,GAAW,EAAA;EAC/B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;IAAA,OACjC,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,UAAC,KAAK,EAAE,MAAM;MAAA,OAAK,OAAO,CAAC;QAAE,KAAK,EAAL,KAAK;QAAE,MAAM,EAAN;MAAM,CAAE,CAAC;IAAA,GAAE,MAAM,CAAC;EAAA,EAC1E;AACH;AAEA,gBAAsB,sBAAsB;EAAA;AAAA;AAe3C;EAAA,4CAfM,WACL,IAAS,EAAA;IAQT,IAAM,KAAK,SAAS,YAAY,CAAC,IAAI,CAAC;IACtC,IAAM,IAAI,SAAS,YAAY,CAAC,KAAK,CAAC,QAAS,CAAC;IAChD,IAAM,IAAI,SAAS,iBAAiB,CAAC,KAAK,CAAC,QAAS,EAAE;MACpD,QAAQ,EAAE,YAAY,CAAC;KACxB,CAAC;IACF,OAAO;MAAE,IAAI,EAAJ,IAAI;MAAE,IAAI,EAAJ;IAAI,CAAE;EACvB,CAAC;EAAA;AAAA","sourcesContent":["import { EncodingType, readAsStringAsync } from 'expo-file-system';\nimport { Image } from 'react-native';\nimport { resolveAsync } from './resolveAsync';\n\nfunction getSizeAsync(uri: string): Promise<{ width: number; height: number }> {\n  return new Promise((resolve, reject) =>\n    Image.getSize(uri, (width, height) => resolve({ width, height }), reject)\n  );\n}\n\nexport async function base64forImageUriAsync(\n  file: any\n): Promise<{\n  data: string;\n  size: {\n    width: number;\n    height: number;\n  };\n}> {\n  const asset = await resolveAsync(file);\n  const size = await getSizeAsync(asset.localUri!);\n  const data = await readAsStringAsync(asset.localUri!, {\n    encoding: EncodingType.Base64,\n  });\n  return { data, size };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}