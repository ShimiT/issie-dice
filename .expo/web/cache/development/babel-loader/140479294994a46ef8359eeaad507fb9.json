{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { readAsStringAsync } from 'expo-file-system';\nimport THREE from \"../Three\";\nexport default function readFromFileSystemAsStringAsync(_x) {\n  return _readFromFileSystemAsStringAsync.apply(this, arguments);\n}\nfunction _readFromFileSystemAsStringAsync() {\n  _readFromFileSystemAsStringAsync = _asyncToGenerator(function* (localUri) {\n    if (global.__expo_three_log_loading) {\n      console.time('loadAsset');\n    }\n    if (Platform.OS === 'web') {\n      var loader = new THREE.FileLoader();\n      return new Promise(function (resolve, reject) {\n        return loader.load(localUri, function () {\n          var _ref = _asyncToGenerator(function* (value) {\n            resolve(yield value);\n          });\n          return function (_x2) {\n            return _ref.apply(this, arguments);\n          };\n        }(), function () {}, reject);\n      });\n    }\n    try {\n      return yield readAsStringAsync(localUri);\n    } catch (_ref2) {\n      var message = _ref2.message;\n      throw new Error(\"ExpoTHREE: FileSystem.readAsStringAsync(\" + localUri + \") \" + message);\n    } finally {\n      if (global.__expo_three_log_loading) {\n        console.timeEnd('loadAsset');\n      }\n    }\n  });\n  return _readFromFileSystemAsStringAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/loaders/readAsStringAsync.ts"],"names":[],"mappings":";;AACA,SAAS,iBAAiB,QAAQ,kBAAkB;AAEpD,OAAO,KAAK;AAIZ,wBAA8B,+BAA+B;EAAA;AAAA;AAgC5D;EAAA,qDAhCc,WACb,QAAgB,EAAA;IAEhB,IAAI,MAAM,CAAC,wBAAwB,EAAE;MACnC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B;IAED,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;MACzB,IAAM,MAAM,GAAG,IAAI,KAAK,CAAC,UAAU,EAAE;MACrC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QAAA,OACjC,MAAM,CAAC,IAAI,CACT,QAAQ;UAAA,6BACR,WAAM,KAAK,EAAG;YAEZ,OAAO,OAAO,KAAK,CAAC;UACtB,CAAC;UAAA;YAAA;UAAA;QAAA,KACD,YAAK,CAAE,CAAC,EACR,MAAM,CACP;MAAA,EACF;IACF;IACD,IAAI;MACF,aAAa,iBAAiB,CAAC,QAAQ,CAAC;KACzC,CAAC,cAAoB;MAAA,IAAX,OAAO,SAAP,OAAO;MAChB,MAAM,IAAI,KAAK,8CAC8B,QAAQ,UAAK,OAAO,CAChE;KACF,SAAS;MACR,IAAI,MAAM,CAAC,wBAAwB,EAAE;QACnC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;MAC7B;IACF;EACH,CAAC;EAAA;AAAA","sourcesContent":["import { Platform } from 'react-native';\nimport { readAsStringAsync } from 'expo-file-system';\n\nimport THREE from '../Three';\n\ndeclare var global: any;\n\nexport default async function readFromFileSystemAsStringAsync(\n  localUri: string\n): Promise<string | null> {\n  if (global.__expo_three_log_loading) {\n    console.time('loadAsset');\n  }\n\n  if (Platform.OS === 'web') {\n    const loader = new THREE.FileLoader();\n    return new Promise((resolve, reject) =>\n      loader.load(\n        localUri,\n        async value => {\n          // @ts-ignore\n          resolve(await value);\n        },\n        () => {},\n        reject\n      )\n    );\n  }\n  try {\n    return await readAsStringAsync(localUri);\n  } catch ({ message }) {\n    throw new Error(\n      `ExpoTHREE: FileSystem.readAsStringAsync(${localUri}) ${message}`\n    );\n  } finally {\n    if (global.__expo_three_log_loading) {\n      console.timeEnd('loadAsset');\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}