{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { resolveAsync } from 'expo-asset-utils';\nimport resolveAsset, { stringFromAsset } from \"./resolveAsset\";\nimport { loadDaeAsync, loadObjAsync, loadMtlAsync, loadArrayBufferAsync } from \"./loaders/loadModelsAsync\";\nimport \"./polyfillTextureLoader.fx\";\nimport { loadTextureAsync } from \"./loaders/loadTextureAsync\";\nimport { loaderClassForExtension, loaderClassForUri } from \"./loaderClassForExtension\";\nexport function loadBasicModelAsync(_x) {\n  return _loadBasicModelAsync.apply(this, arguments);\n}\nfunction _loadBasicModelAsync() {\n  _loadBasicModelAsync = _asyncToGenerator(function* (options) {\n    var uri = options.uri,\n      onProgress = options.onProgress,\n      onAssetRequested = options.onAssetRequested,\n      loader = options.loader,\n      LoaderClass = options.LoaderClass;\n    var _loader = loader || new LoaderClass();\n    if (_loader.setPath) {\n      _loader.setPath(onAssetRequested);\n    }\n    return new Promise(function (res, rej) {\n      return _loader.load(uri, res, onProgress, rej);\n    });\n  });\n  return _loadBasicModelAsync.apply(this, arguments);\n}\nexport default function loadAsync(_x2, _x3) {\n  return _loadAsync.apply(this, arguments);\n}\nfunction _loadAsync() {\n  _loadAsync = _asyncToGenerator(function* (res, onProgress) {\n    var onAssetRequested = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};\n    var urls = yield resolveAsset(res);\n    if (!urls) {\n      throw new Error(\"ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: \" + res + \".\");\n    }\n    var asset = urls[0];\n    var url = (yield resolveAsync(asset)).localUri;\n    if (url == null) {\n      throw new Error(\"ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.\");\n    }\n    if (urls.length === 1) {\n      if (url.match(/\\.(jpeg|jpg|gif|png)$/)) {\n        return loadTextureAsync({\n          asset: asset\n        });\n      } else if (url.match(/\\.dae$/i)) {\n        return loadDaeAsync({\n          asset: url,\n          onProgress: onProgress,\n          onAssetRequested: onAssetRequested\n        });\n      } else if (url.match(/\\.(glb|gltf)$/i)) {\n        var arrayBuffer = yield loadArrayBufferAsync({\n          uri: url,\n          onProgress: onProgress\n        });\n        var GLTFLoader = loaderClassForExtension('gltf');\n        var loader = new GLTFLoader();\n        return new Promise(function (res, rej) {\n          return loader.parse(arrayBuffer, onAssetRequested, res, rej);\n        });\n      } else if (url.match(/\\.json$/i)) {\n        throw new Error('loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.');\n      } else if (url.match(/\\.obj$/i)) {\n        return loadObjAsync({\n          asset: url,\n          onAssetRequested: onAssetRequested\n        });\n      } else if (url.match(/\\.mtl$/i)) {\n        return loadMtlAsync({\n          asset: url,\n          onAssetRequested: onAssetRequested\n        });\n      } else {\n        var LoaderClass = loaderClassForUri(url);\n        return loadBasicModelAsync({\n          uri: url,\n          onProgress: onProgress,\n          onAssetRequested: onAssetRequested,\n          LoaderClass: LoaderClass\n        });\n      }\n    } else if (urls.length === 2) {\n      var urlB = yield stringFromAsset(urls[1]);\n      if (urlB != null) {\n        if (url.match(/\\.mtl$/i) && urlB.match(/\\.obj$/i)) {\n          return loadObjAsync({\n            asset: urlB,\n            mtlAsset: url,\n            onAssetRequested: onAssetRequested\n          });\n        } else if (url.match(/\\.obj$/i) && urlB.match(/\\.mtl$/i)) {\n          return loadObjAsync({\n            asset: url,\n            mtlAsset: urlB,\n            onAssetRequested: onAssetRequested\n          });\n        }\n      }\n      throw new Error('Unrecognized File Type: ' + url);\n    } else {\n      throw new Error('Too many arguments passed: ' + urls);\n    }\n  });\n  return _loadAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/loadAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolveAsync } from 'expo-asset-utils';\nimport resolveAsset, { stringFromAsset } from './resolveAsset';\nimport { ProgressCallback } from './loading.types';\nimport { loadTexture } from './loadTexture';\nimport {\n  loadDaeAsync,\n  loadObjAsync,\n  loadMtlAsync,\n  loadArrayBufferAsync,\n} from './loaders/loadModelsAsync';\nimport './polyfillTextureLoader.fx';\n\nimport { loadTextureAsync } from './loaders/loadTextureAsync';\nimport {\n  loaderClassForExtension,\n  loaderClassForUri,\n} from './loaderClassForExtension';\n\nexport async function loadBasicModelAsync(options: {\n  uri: string;\n  onProgress?: ProgressCallback;\n  onAssetRequested: any;\n  loader?: any;\n  LoaderClass: any;\n}) {\n  const { uri, onProgress, onAssetRequested, loader, LoaderClass } = options;\n  const _loader = loader || new LoaderClass();\n  if (_loader.setPath) {\n    _loader.setPath(onAssetRequested);\n  }\n  return new Promise((res, rej) => _loader.load(uri, res, onProgress, rej));\n}\n\nexport default async function loadAsync(\n  res,\n  onProgress?: ProgressCallback,\n  onAssetRequested: (...args: any[]) => any = function() {}\n) {\n  let urls = await resolveAsset(res);\n  if (!urls) {\n    throw new Error(\n      `ExpoTHREE.loadAsync: Cannot parse undefined assets. Please pass valid resources for: ${res}.`\n    );\n  }\n  const asset = urls[0];\n  let url: string | null = (await resolveAsync(asset)).localUri;\n\n  if (url == null) {\n    throw new Error(\n      `ExpoTHREE.loadAsync: this asset couldn't be downloaded. Be sure that your app.json contains the correct extensions.`\n    );\n  }\n\n  if (urls.length === 1) {\n    if (url.match(/\\.(jpeg|jpg|gif|png)$/)) {\n      return loadTextureAsync({ asset });\n    } else if (url.match(/\\.dae$/i)) {\n      return loadDaeAsync({\n        asset: url,\n        onProgress,\n        onAssetRequested,\n      });\n    } else if (url.match(/\\.(glb|gltf)$/i)) {\n      const arrayBuffer = await loadArrayBufferAsync({ uri: url, onProgress });\n      const GLTFLoader = loaderClassForExtension('gltf');\n      const loader = new GLTFLoader();\n      return new Promise((res, rej) =>\n        loader.parse(arrayBuffer, onAssetRequested, res, rej)\n      );\n    } else if (url.match(/\\.json$/i)) {\n      throw new Error(\n        'loadAsync: Please use ExpoTHREE.parseAsync({json}) instead, json can be loaded in lots of different ways.'\n      );\n    } else if (url.match(/\\.obj$/i)) {\n      return loadObjAsync({ asset: url, onAssetRequested });\n    } else if (url.match(/\\.mtl$/i)) {\n      return loadMtlAsync({ asset: url, onAssetRequested });\n    } else {\n      const LoaderClass = loaderClassForUri(url);\n      return loadBasicModelAsync({\n        uri: url,\n        onProgress,\n        onAssetRequested,\n        LoaderClass,\n      });\n    }\n  } else if (urls.length === 2) {\n    let urlB = await stringFromAsset(urls[1]);\n    if (urlB != null) {\n      if (url.match(/\\.mtl$/i) && urlB.match(/\\.obj$/i)) {\n        return loadObjAsync({\n          asset: urlB,\n          mtlAsset: url,\n          onAssetRequested,\n        });\n      } else if (url.match(/\\.obj$/i) && urlB.match(/\\.mtl$/i)) {\n        return loadObjAsync({\n          asset: url,\n          mtlAsset: urlB,\n          onAssetRequested,\n        });\n      }\n    }\n\n    throw new Error('Unrecognized File Type: ' + url);\n  } else {\n    throw new Error('Too many arguments passed: ' + urls);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}