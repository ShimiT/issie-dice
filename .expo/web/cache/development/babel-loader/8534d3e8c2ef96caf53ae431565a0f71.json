{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { resolveAsync } from 'expo-asset-utils';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { FileLoader } from 'three';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport readAsStringAsync from \"./readAsStringAsync\";\nfunction loadFileAsync(_x) {\n  return _loadFileAsync.apply(this, arguments);\n}\nfunction _loadFileAsync() {\n  _loadFileAsync = _asyncToGenerator(function* (_ref) {\n    var _yield$resolveAsync$l;\n    var asset = _ref.asset,\n      funcName = _ref.funcName;\n    if (!asset) {\n      throw new Error(\"ExpoTHREE.\" + funcName + \": Cannot parse a null asset\");\n    }\n    return (_yield$resolveAsync$l = (yield resolveAsync(asset)).localUri) != null ? _yield$resolveAsync$l : null;\n  });\n  return _loadFileAsync.apply(this, arguments);\n}\nexport function loadMtlAsync(_x2) {\n  return _loadMtlAsync.apply(this, arguments);\n}\nfunction _loadMtlAsync() {\n  _loadMtlAsync = _asyncToGenerator(function* (_ref2) {\n    var asset = _ref2.asset,\n      onAssetRequested = _ref2.onAssetRequested;\n    var uri = yield loadFileAsync({\n      asset: asset,\n      funcName: 'loadMtlAsync'\n    });\n    if (!uri) return;\n    var loader = new MTLLoader();\n    loader.setPath(onAssetRequested);\n    if (Platform.OS === 'web') {\n      return yield new Promise(function (resolve, reject) {\n        return loader.load(uri, resolve, function () {}, reject);\n      });\n    }\n    return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\n  });\n  return _loadMtlAsync.apply(this, arguments);\n}\nexport function loadObjAsync(_x3) {\n  return _loadObjAsync.apply(this, arguments);\n}\nfunction _loadObjAsync() {\n  _loadObjAsync = _asyncToGenerator(function* (options) {\n    var asset = options.asset,\n      onAssetRequested = options.onAssetRequested,\n      onMtlAssetRequested = options.onMtlAssetRequested,\n      mtlAsset = options.mtlAsset,\n      materials = options.materials;\n    var nextMaterials = materials;\n    if (nextMaterials == null && mtlAsset != null) {\n      nextMaterials = yield loadMtlAsync({\n        asset: mtlAsset,\n        onAssetRequested: onMtlAssetRequested || onAssetRequested\n      });\n      nextMaterials.preload();\n    }\n    var uri = yield loadFileAsync({\n      asset: asset,\n      funcName: 'loadObjAsync'\n    });\n    if (!uri) return;\n    var loader = new OBJLoader();\n    if (onAssetRequested) {\n      loader.setPath(onAssetRequested);\n    }\n    if (nextMaterials != null) {\n      loader.setMaterials(nextMaterials);\n    }\n    if (Platform.OS === 'web') {\n      return yield new Promise(function (resolve, reject) {\n        return loader.load(uri, resolve, function () {}, reject);\n      });\n    }\n    return loadFileContentsAsync(loader, uri, 'loadObjAsync');\n  });\n  return _loadObjAsync.apply(this, arguments);\n}\nexport function loadDaeAsync(_x4) {\n  return _loadDaeAsync.apply(this, arguments);\n}\nfunction _loadDaeAsync() {\n  _loadDaeAsync = _asyncToGenerator(function* (_ref3) {\n    var asset = _ref3.asset,\n      onAssetRequested = _ref3.onAssetRequested,\n      onProgress = _ref3.onProgress;\n    var uri = yield loadFileAsync({\n      asset: asset,\n      funcName: 'loadDaeAsync'\n    });\n    if (typeof uri !== 'string' || uri == null) {\n      return;\n    }\n    return new Promise(function (res, rej) {\n      return new FileLoader().load(uri, function (text) {\n        var loader = new ColladaLoader();\n        var parsedResult = loader.parse(text, onAssetRequested);\n        res(parsedResult);\n      }, onProgress, rej);\n    });\n  });\n  return _loadDaeAsync.apply(this, arguments);\n}\nfunction loadFileContentsAsync(_x5, _x6, _x7) {\n  return _loadFileContentsAsync.apply(this, arguments);\n}\nfunction _loadFileContentsAsync() {\n  _loadFileContentsAsync = _asyncToGenerator(function* (loader, uri, funcName) {\n    try {\n      var fileContents = yield readAsStringAsync(uri);\n      return loader.parse(fileContents);\n    } catch (_ref5) {\n      var message = _ref5.message;\n      throw new Error(\"ExpoTHREE.\" + funcName + \": Expo.FileSystem Failed to read uri: \" + uri + \". \" + message);\n    }\n  });\n  return _loadFileContentsAsync.apply(this, arguments);\n}\nexport function loadArrayBufferAsync(_x8) {\n  return _loadArrayBufferAsync.apply(this, arguments);\n}\nfunction _loadArrayBufferAsync() {\n  _loadArrayBufferAsync = _asyncToGenerator(function* (_ref4) {\n    var uri = _ref4.uri,\n      onProgress = _ref4.onProgress;\n    var loader = new FileLoader();\n    loader.setResponseType('arraybuffer');\n    return new Promise(function (res, rej) {\n      return loader.load(uri, res, onProgress, rej);\n    });\n  });\n  return _loadArrayBufferAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../../src/loaders/loadModelsAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolveAsync } from 'expo-asset-utils';\nimport { Platform } from 'react-native';\nimport { FileLoader } from 'three';\nimport { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\n\nimport readAsStringAsync from './readAsStringAsync';\n\nasync function loadFileAsync({ asset, funcName }): Promise<string | null> {\n  if (!asset) {\n    throw new Error(`ExpoTHREE.${funcName}: Cannot parse a null asset`);\n  }\n  return (await resolveAsync(asset)).localUri ?? null;\n}\n\nexport async function loadMtlAsync({ asset, onAssetRequested }): Promise<any> {\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadMtlAsync',\n  });\n  if (!uri) return;\n\n  const loader = new MTLLoader();\n  loader.setPath(onAssetRequested);\n\n  if (Platform.OS === 'web') {\n    return await new Promise((resolve, reject) =>\n      loader.load(uri, resolve, () => {}, reject)\n    );\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadMtlAsync');\n}\n\nexport async function loadObjAsync(options: {\n  asset: any;\n  onAssetRequested?: (...args: any[]) => any;\n  onMtlAssetRequested?: (...args: any[]) => any;\n  mtlAsset?: any;\n  materials?: any;\n}): Promise<any> {\n  const {\n    asset,\n    onAssetRequested,\n    onMtlAssetRequested,\n    mtlAsset,\n    materials,\n  } = options;\n  let nextMaterials = materials;\n  if (nextMaterials == null && mtlAsset != null) {\n    nextMaterials = await loadMtlAsync({\n      asset: mtlAsset,\n      onAssetRequested: onMtlAssetRequested || onAssetRequested,\n    });\n    nextMaterials.preload();\n  }\n\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadObjAsync',\n  });\n  if (!uri) return;\n\n  const loader = new OBJLoader();\n  if (onAssetRequested) {\n    loader.setPath(onAssetRequested as any);\n  }\n  if (nextMaterials != null) {\n    loader.setMaterials(nextMaterials);\n  }\n\n  if (Platform.OS === 'web') {\n    return await new Promise((resolve, reject) =>\n      loader.load(uri, resolve, () => {}, reject)\n    );\n  }\n\n  return loadFileContentsAsync(loader, uri, 'loadObjAsync');\n}\n\nexport async function loadDaeAsync({\n  asset,\n  onAssetRequested,\n  onProgress,\n}): Promise<any> {\n  const uri = await loadFileAsync({\n    asset,\n    funcName: 'loadDaeAsync',\n  });\n  if (typeof uri !== 'string' || uri == null) {\n    return;\n  }\n\n  return new Promise((res, rej) =>\n    new FileLoader().load(\n      uri!,\n      text => {\n        // @ts-ignore\n        const loader = new ColladaLoader();\n        const parsedResult = (loader.parse as any)(text, onAssetRequested);\n        res(parsedResult);\n      },\n      onProgress,\n      rej\n    )\n  );\n}\n\nasync function loadFileContentsAsync(loader, uri, funcName): Promise<any> {\n  try {\n    const fileContents = await readAsStringAsync(uri);\n    return loader.parse(fileContents);\n  } catch ({ message }) {\n    // Or model loader THREE.OBJLoader failed to parse fileContents\n    throw new Error(\n      `ExpoTHREE.${funcName}: Expo.FileSystem Failed to read uri: ${uri}. ${message}`\n    );\n  }\n}\n\nexport async function loadArrayBufferAsync({ uri, onProgress }): Promise<any> {\n  const loader = new FileLoader();\n  loader.setResponseType('arraybuffer');\n  return new Promise((res, rej) => loader.load(uri, res, onProgress, rej));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}