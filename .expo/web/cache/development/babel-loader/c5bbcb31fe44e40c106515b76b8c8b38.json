{"ast":null,"code":"import { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nfunction getExtension(uri) {\n  var lastUriComponent = uri.split('.').pop();\n  return lastUriComponent.split('?')[0].split('#')[0];\n}\nexport function loaderClassForUri(uri) {\n  var extension = getExtension(uri);\n  return loaderClassForExtension(extension);\n}\nexport function loaderClassForExtension(extension) {\n  if (typeof extension !== 'string') {\n    throw new Error('Supplied extension is not a valid string');\n  }\n  switch (extension.toLowerCase()) {\n    case 'glb':\n    case 'gltf':\n      return GLTFLoader;\n    case 'obj':\n      return OBJLoader;\n    case 'mtl':\n      return MTLLoader;\n    case 'dae':\n      return ColladaLoader;\n    default:\n      throw new Error('ExpoTHREE.loaderClassForExtension(): Unrecognized file type ' + extension);\n  }\n}","map":{"version":3,"sources":["../src/loaderClassForExtension.ts"],"names":[],"mappings":"AAAA,SAAS,aAAa,QAAQ,0CAA0C;AACxE,SAAS,UAAU,QAAQ,uCAAuC;AAClE,SAAS,SAAS,QAAQ,sCAAsC;AAChE,SAAS,SAAS,QAAQ,sCAAsC;AAEhE,SAAS,YAAY,CAAC,GAAW,EAAA;EAC/B,IAAM,gBAAgB,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAY;EACvD,OAAO,gBAAgB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACrD;AAEA,OAAM,SAAU,iBAAiB,CAAC,GAAW,EAAA;EAC3C,IAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC;EACnC,OAAO,uBAAuB,CAAC,SAAS,CAAC;AAC3C;AAEA,OAAM,SAAU,uBAAuB,CAAC,SAAiB,EAAA;EACvD,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE;IACjC,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC;EAC5D;EACD,QAAQ,SAAS,CAAC,WAAW,EAAE;IAC7B,KAAK,KAAK;IACV,KAAK,MAAM;MACT,OAAO,UAAU;IACnB,KAAK,KAAK;MACR,OAAO,SAAS;IAClB,KAAK,KAAK;MACR,OAAO,SAAS;IAClB,KAAK,KAAK;MACR,OAAO,aAAa;IACtB;MACE,MAAM,IAAI,KAAK,CACb,8DAA8D,GAC5D,SAAS,CACZ;EAAC;AAER","sourcesContent":["import { ColladaLoader } from 'three/examples/jsm/loaders/ColladaLoader';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader';\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\n\nfunction getExtension(uri: string): string {\n  const lastUriComponent = uri.split('.').pop() as string;\n  return lastUriComponent.split('?')[0].split('#')[0];\n}\n\nexport function loaderClassForUri(uri: string): string {\n  const extension = getExtension(uri);\n  return loaderClassForExtension(extension);\n}\n\nexport function loaderClassForExtension(extension: string): any {\n  if (typeof extension !== 'string') {\n    throw new Error('Supplied extension is not a valid string');\n  }\n  switch (extension.toLowerCase()) {\n    case 'glb':\n    case 'gltf':\n      return GLTFLoader;\n    case 'obj':\n      return OBJLoader;\n    case 'mtl':\n      return MTLLoader;\n    case 'dae':\n      return ColladaLoader;\n    default:\n      throw new Error(\n        'ExpoTHREE.loaderClassForExtension(): Unrecognized file type ' +\n          extension\n      );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}