{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport { Renderer, TextureLoader } from 'expo-three';\nimport { GLView } from 'expo-gl';\nimport { Scene, Mesh, MeshBasicMaterial, PerspectiveCamera, BoxGeometry, DoubleSide } from \"three\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction Cube(props) {\n  var _useState = useState(new TextureLoader()),\n    _useState2 = _slicedToArray(_useState, 1),\n    loader = _useState2[0];\n  var onContextCreate = function () {\n    var _ref = _asyncToGenerator(function* (gl) {\n      var scene = new Scene();\n      var camera = new PerspectiveCamera(75, gl.drawingBufferWidth / gl.drawingBufferHeight, 0.1, 1000);\n      gl.canvas = {\n        width: gl.drawingBufferWidth,\n        height: gl.drawingBufferHeight\n      };\n      camera.position.z = 2;\n      var renderer = new Renderer({\n        gl: gl\n      });\n      renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n      var geometry = new BoxGeometry(2, 1, 1);\n      var cubeMaterials = [new MeshBasicMaterial({\n        map: loader.load(require(\"./profile-pic.png\")),\n        transparent: true,\n        opacity: 0.8,\n        side: DoubleSide\n      }), new MeshBasicMaterial({\n        color: 0x00ff00,\n        transparent: true,\n        opacity: 0.8,\n        side: DoubleSide\n      }), new MeshBasicMaterial({\n        color: 0x0000ff,\n        transparent: true,\n        opacity: 0.8,\n        side: DoubleSide\n      }), new MeshBasicMaterial({\n        color: 0xffff00,\n        transparent: true,\n        opacity: 0.8,\n        side: DoubleSide\n      }), new MeshBasicMaterial({\n        color: 0xff00ff,\n        transparent: true,\n        opacity: 0.8,\n        side: DoubleSide\n      }), new MeshBasicMaterial({\n        color: 0x00ffff,\n        transparent: true,\n        opacity: 0.8,\n        side: DoubleSide\n      })];\n      var cube = new Mesh(geometry, cubeMaterials);\n      scene.add(cube);\n      var render = function render() {\n        requestAnimationFrame(render);\n        cube.rotation.x += 0.01;\n        cube.rotation.y += 0.01;\n        renderer.render(scene, camera);\n        gl.endFrameEXP();\n      };\n      render();\n    });\n    return function onContextCreate(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return _jsx(GLView, {\n    style: {\n      width: 500,\n      height: 500\n    },\n    onContextCreate: onContextCreate\n  });\n}\nexport default Cube;","map":{"version":3,"names":["React","useState","Renderer","TextureLoader","GLView","Scene","Mesh","MeshBasicMaterial","PerspectiveCamera","BoxGeometry","DoubleSide","Cube","props","loader","onContextCreate","gl","scene","camera","drawingBufferWidth","drawingBufferHeight","canvas","width","height","position","z","renderer","setSize","geometry","cubeMaterials","map","load","require","transparent","opacity","side","color","cube","add","render","requestAnimationFrame","rotation","x","y","endFrameEXP"],"sources":["/Users/I555060/sap/issie-dice/cube.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { View } from 'react-native';\nimport Expo from 'expo';\nimport ExpoTHREE, { Renderer, TextureLoader } from 'expo-three';\nimport { ExpoWebGLRenderingContext, GLView } from 'expo-gl';\n\nimport {\n    Scene,\n    Mesh,\n    MeshBasicMaterial,\n    PerspectiveCamera,\n    BoxGeometry,\n    DoubleSide,\n} from \"three\";\nfunction Cube(props: any) {\n\n    const [loader] = useState(new TextureLoader())\n    const onContextCreate = async (gl: any) => {\n        // three.js implementation.\n        const scene = new Scene();\n        const camera = new PerspectiveCamera(\n            75,\n            gl.drawingBufferWidth / gl.drawingBufferHeight,\n            0.1,\n            1000\n        );\n        gl.canvas = {\n            width: gl.drawingBufferWidth,\n            height: gl.drawingBufferHeight,\n        };\n\n        // set camera position away from cube\n        camera.position.z = 2;\n\n        const renderer = new Renderer({ gl });\n        // set size of buffer to be equal to drawing buffer width\n        renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n        // create cube\n        // define geometry\n        const geometry = new BoxGeometry(2, 1, 1);\n        var cubeMaterials = [\n            new MeshBasicMaterial({\n                //color:0xff0000, \n                map: loader.load(require('./profile-pic.png')),\n                transparent: true, opacity: 0.8, side: DoubleSide\n            }),\n\n\n            new MeshBasicMaterial({ color: 0x00ff00, transparent: true, opacity: 0.8, side: DoubleSide }),\n            new MeshBasicMaterial({ color: 0x0000ff, transparent: true, opacity: 0.8, side: DoubleSide }),\n            new MeshBasicMaterial({ color: 0xffff00, transparent: true, opacity: 0.8, side: DoubleSide }),\n            new MeshBasicMaterial({ color: 0xff00ff, transparent: true, opacity: 0.8, side: DoubleSide }),\n            new MeshBasicMaterial({ color: 0x00ffff, transparent: true, opacity: 0.8, side: DoubleSide })];\n\n        const cube = new Mesh(geometry, cubeMaterials);\n\n        // add cube to scene\n        scene.add(cube);\n\n        // create render function\n        const render = () => {\n            requestAnimationFrame(render);\n            // create rotate functionality\n            // rotate around x axis\n            cube.rotation.x += 0.01;\n\n            // rotate around y axis\n            cube.rotation.y += 0.01;\n\n            renderer.render(scene, camera);\n            gl.endFrameEXP();\n        };\n\n        // call render\n        render();\n    };\n\n    return (\n        <GLView style={{ width: 500, height: 500 }}\n            onContextCreate={onContextCreate}\n        />\n    )\n}\n\nexport default Cube;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAGvC,SAAoBC,QAAQ,EAAEC,aAAa,QAAQ,YAAY;AAC/D,SAAoCC,MAAM,QAAQ,SAAS;AAE3D,SACIC,KAAK,EACLC,IAAI,EACJC,iBAAiB,EACjBC,iBAAiB,EACjBC,WAAW,EACXC,UAAU,QACP,OAAO;AAAC;AACf,SAASC,IAAI,CAACC,KAAU,EAAE;EAEtB,gBAAiBX,QAAQ,CAAC,IAAIE,aAAa,EAAE,CAAC;IAAA;IAAvCU,MAAM;EACb,IAAMC,eAAe;IAAA,6BAAG,WAAOC,EAAO,EAAK;MAEvC,IAAMC,KAAK,GAAG,IAAIX,KAAK,EAAE;MACzB,IAAMY,MAAM,GAAG,IAAIT,iBAAiB,CAChC,EAAE,EACFO,EAAE,CAACG,kBAAkB,GAAGH,EAAE,CAACI,mBAAmB,EAC9C,GAAG,EACH,IAAI,CACP;MACDJ,EAAE,CAACK,MAAM,GAAG;QACRC,KAAK,EAAEN,EAAE,CAACG,kBAAkB;QAC5BI,MAAM,EAAEP,EAAE,CAACI;MACf,CAAC;MAGDF,MAAM,CAACM,QAAQ,CAACC,CAAC,GAAG,CAAC;MAErB,IAAMC,QAAQ,GAAG,IAAIvB,QAAQ,CAAC;QAAEa,EAAE,EAAFA;MAAG,CAAC,CAAC;MAErCU,QAAQ,CAACC,OAAO,CAACX,EAAE,CAACG,kBAAkB,EAAEH,EAAE,CAACI,mBAAmB,CAAC;MAI/D,IAAMQ,QAAQ,GAAG,IAAIlB,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACzC,IAAImB,aAAa,GAAG,CAChB,IAAIrB,iBAAiB,CAAC;QAElBsB,GAAG,EAAEhB,MAAM,CAACiB,IAAI,CAACC,OAAO,qBAAqB,CAAC;QAC9CC,WAAW,EAAE,IAAI;QAAEC,OAAO,EAAE,GAAG;QAAEC,IAAI,EAAExB;MAC3C,CAAC,CAAC,EAGF,IAAIH,iBAAiB,CAAC;QAAE4B,KAAK,EAAE,QAAQ;QAAEH,WAAW,EAAE,IAAI;QAAEC,OAAO,EAAE,GAAG;QAAEC,IAAI,EAAExB;MAAW,CAAC,CAAC,EAC7F,IAAIH,iBAAiB,CAAC;QAAE4B,KAAK,EAAE,QAAQ;QAAEH,WAAW,EAAE,IAAI;QAAEC,OAAO,EAAE,GAAG;QAAEC,IAAI,EAAExB;MAAW,CAAC,CAAC,EAC7F,IAAIH,iBAAiB,CAAC;QAAE4B,KAAK,EAAE,QAAQ;QAAEH,WAAW,EAAE,IAAI;QAAEC,OAAO,EAAE,GAAG;QAAEC,IAAI,EAAExB;MAAW,CAAC,CAAC,EAC7F,IAAIH,iBAAiB,CAAC;QAAE4B,KAAK,EAAE,QAAQ;QAAEH,WAAW,EAAE,IAAI;QAAEC,OAAO,EAAE,GAAG;QAAEC,IAAI,EAAExB;MAAW,CAAC,CAAC,EAC7F,IAAIH,iBAAiB,CAAC;QAAE4B,KAAK,EAAE,QAAQ;QAAEH,WAAW,EAAE,IAAI;QAAEC,OAAO,EAAE,GAAG;QAAEC,IAAI,EAAExB;MAAW,CAAC,CAAC,CAAC;MAElG,IAAM0B,IAAI,GAAG,IAAI9B,IAAI,CAACqB,QAAQ,EAAEC,aAAa,CAAC;MAG9CZ,KAAK,CAACqB,GAAG,CAACD,IAAI,CAAC;MAGf,IAAME,MAAM,GAAG,SAATA,MAAM,GAAS;QACjBC,qBAAqB,CAACD,MAAM,CAAC;QAG7BF,IAAI,CAACI,QAAQ,CAACC,CAAC,IAAI,IAAI;QAGvBL,IAAI,CAACI,QAAQ,CAACE,CAAC,IAAI,IAAI;QAEvBjB,QAAQ,CAACa,MAAM,CAACtB,KAAK,EAAEC,MAAM,CAAC;QAC9BF,EAAE,CAAC4B,WAAW,EAAE;MACpB,CAAC;MAGDL,MAAM,EAAE;IACZ,CAAC;IAAA,gBA3DKxB,eAAe;MAAA;IAAA;EAAA,GA2DpB;EAED,OACI,KAAC,MAAM;IAAC,KAAK,EAAE;MAAEO,KAAK,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAI,CAAE;IACvC,eAAe,EAAER;EAAgB,EACnC;AAEV;AAEA,eAAeH,IAAI"},"metadata":{},"sourceType":"module"}