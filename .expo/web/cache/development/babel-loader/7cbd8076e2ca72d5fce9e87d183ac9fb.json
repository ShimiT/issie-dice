{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { ObjectLoader, BufferGeometryLoader } from 'three';\nfunction parseWithLoaderAsync(_x) {\n  return _parseWithLoaderAsync.apply(this, arguments);\n}\nfunction _parseWithLoaderAsync() {\n  _parseWithLoaderAsync = _asyncToGenerator(function* (_ref) {\n    var json = _ref.json,\n      assetProvider = _ref.assetProvider,\n      loader = _ref.loader;\n    loader.setPath && loader.setPath(assetProvider);\n    return loader.parse(json, assetProvider);\n  });\n  return _parseWithLoaderAsync.apply(this, arguments);\n}\nexport default function parseAsync(_x2) {\n  return _parseAsync.apply(this, arguments);\n}\nfunction _parseAsync() {\n  _parseAsync = _asyncToGenerator(function* (_ref2) {\n    var json = _ref2.json,\n      format = _ref2.format,\n      assetProvider = _ref2.assetProvider;\n    if (!format && json.metadata && json.metadata.type) {\n      format = json.metadata.type;\n    }\n    if (!format) {\n      throw new Error('ExpoTHREE.parseAsync(): Invalid null format provided');\n    }\n    switch (format) {\n      case 'clara':\n      case 'object':\n      case 'json':\n      case 'blender':\n        return parseWithLoaderAsync({\n          json: json,\n          assetProvider: assetProvider,\n          loader: new ObjectLoader()\n        });\n      case 'buffer':\n        return parseWithLoaderAsync({\n          json: json,\n          assetProvider: assetProvider,\n          loader: new BufferGeometryLoader()\n        });\n      case 'scene':\n      default:\n        throw new Error(\"ExpoTHREE.parseAsync(): \" + format + \" not supported.\");\n    }\n  });\n  return _parseAsync.apply(this, arguments);\n}","map":{"version":3,"sources":["../src/parseAsync.ts"],"names":[],"mappings":";AAAA,SAAS,YAAY,EAAE,oBAAoB,QAAQ,OAAO;AAAC,SAE5C,oBAAoB;EAAA;AAAA;AAAA;EAAA,0CAAnC,iBAIC;IAAA,IAHC,IAAI,QAAJ,IAAI;MACJ,aAAa,QAAb,aAAa;MACb,MAAM,QAAN,MAAM;IAEN,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC;IAC/C,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,aAAa,CAAC;EAC1C,CAAC;EAAA;AAAA;AASD,wBAA8B,UAAU;EAAA;AAAA;AAiCvC;EAAA,gCAjCc,kBAIH;IAAA,IAHV,IAAI,SAAJ,IAAI;MACJ,MAAM,SAAN,MAAM;MACN,aAAa,SAAb,aAAa;IAEb,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;MAClD,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI;IAC5B;IAED,IAAI,CAAC,MAAM,EAAE;MACX,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC;IACxE;IAED,QAAQ,MAAM;MACZ,KAAK,OAAO;MACZ,KAAK,QAAQ;MACb,KAAK,MAAM;MACX,KAAK,SAAS;QACZ,OAAO,oBAAoB,CAAC;UAC1B,IAAI,EAAJ,IAAI;UACJ,aAAa,EAAb,aAAa;UACb,MAAM,EAAE,IAAI,YAAY;SACzB,CAAC;MACJ,KAAK,QAAQ;QACX,OAAO,oBAAoB,CAAC;UAC1B,IAAI,EAAJ,IAAI;UACJ,aAAa,EAAb,aAAa;UACb,MAAM,EAAE,IAAI,oBAAoB;SACjC,CAAC;MACJ,KAAK,OAAO;MACZ;QACE,MAAM,IAAI,KAAK,8BAA4B,MAAM,qBAAkB;IAAC;EAE1E,CAAC;EAAA;AAAA","sourcesContent":["import { ObjectLoader, BufferGeometryLoader } from 'three';\n\nasync function parseWithLoaderAsync({\n  json,\n  assetProvider,\n  loader,\n}): Promise<any> {\n  loader.setPath && loader.setPath(assetProvider);\n  return loader.parse(json, assetProvider);\n}\n\ntype Parseable = {\n  json: any;\n  format?: string;\n  onProgress?: (...args: any[]) => any;\n  assetProvider: any;\n};\n\nexport default async function parseAsync({\n  json,\n  format,\n  assetProvider,\n}: Parseable): Promise<any> {\n  if (!format && json.metadata && json.metadata.type) {\n    format = json.metadata.type;\n  }\n\n  if (!format) {\n    throw new Error('ExpoTHREE.parseAsync(): Invalid null format provided');\n  }\n\n  switch (format) {\n    case 'clara':\n    case 'object':\n    case 'json':\n    case 'blender':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new ObjectLoader(),\n      });\n    case 'buffer':\n      return parseWithLoaderAsync({\n        json,\n        assetProvider,\n        loader: new BufferGeometryLoader(),\n      });\n    case 'scene':\n    default:\n      throw new Error(`ExpoTHREE.parseAsync(): ${format} not supported.`);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}